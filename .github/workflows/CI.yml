name: CI

on:
  push:
  pull_request:

jobs:
  php-cs-fixer:
    name: PHP-cs-fixer (PHP ${{ matrix.php }})
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        php:
          - '8'
      fail-fast: false
    env:
      PHP_CS_FIXER_FUTURE_MODE: '1'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: intl, bcmath, curl, openssl, mbstring
          ini-values: memory_limit=-1
          tools: pecl, composer, php-cs-fixer
          coverage: none
      - name: Run PHP-CS-Fixer fix
        run: php-cs-fixer fix --dry-run --diff --ansi

  static-checks:
    runs-on: ubuntu-20.04
    name: "Static checks (PHP ${{ matrix.php }}, Symfony ${{ matrix.symfony }})"
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        php: [ "8.0" ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "${{ matrix.php }}"
          ini-values: date.timezone=Europe/Warsaw, opcache.enable=1, opcache.enable_cli=1, opcache.memory_consumption=256, opcache.max_accelerated_files=32531, opcache.interned_strings_buffer=8, opcache.validate_timestamps=0, opcache.save_comments=1, opcache.fast_shutdown=0
          extensions: intl, gd, opcache, mysql, pdo_mysql, :xdebug
          tools: symfony
          coverage: none
      - name: Cache Composer cache
        uses: actions/cache@v2
        with:
          path: ~/.composer/cache
          key: composer-cache-php${{ matrix.php }}-symfony-${{ matrix.symfony }}
      - name: Install dependencies
        run: |
          composer update --prefer-dist --no-interaction --no-progress -W

      - name: Psalm
        run: vendor/bin/psalm --threads=2 --shepherd --stats
        continue-on-error: true

      - name: PHPStan
        run: ./vendor/bin/phpstan analyse --no-interaction --no-progress --ansi

  tests:
    runs-on: ubuntu-20.04

    strategy:
      fail-fast: true
      matrix:
        php: [8.0]
        symfony: [5.3]
        include:
          - php: '8.0'
            symfony: '^5.3'
            coverage: true

    name: PHPUnit (PHP ${{ matrix.php }})(Symfony ${{ matrix.symfony }})

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, imagick
          tools: composer:v2
          coverage: pcov

      - name: Restrict Symfony version
        if: matrix.symfony != ''
        run: |
          composer global require --no-progress --no-scripts --no-plugins "symfony/flex:^1.10"
          composer config extra.symfony.require "${{ matrix.symfony }}"

      - name: Cache Composer cache
        uses: actions/cache@v2
        with:
          path: ~/.composer/cache
          key: composer-cache-php${{ matrix.php }}-symfony{{ matrix.symfony }}

      - name: Install PHP dependencies
        run: composer update --no-interaction --no-scripts -W

      - name: Enable code coverage
        if: matrix.coverage
        run: echo "COVERAGE=1" >> $GITHUB_ENV

      - name: PHPUnit
        run: |
          mkdir -p build/logs/phpunit
          if [ "$COVERAGE" = '1' ]; then
            ./vendor/bin/phpunit --coverage-clover build/logs/phpunit/clover.xml --log-junit build/logs/phpunit/junit.xml --colors=always
          else
            ./vendor/bin/phpunit --log-junit build/logs/phpunit/junit.xml --colors=always
          fi

      - name: Upload coverage results to Codecov
        if: matrix.coverage
        uses: codecov/codecov-action@v1
        with:
          name: phpunit-php${{ matrix.php }}
          flags: phpunit
          fail_ci_if_error: true
        continue-on-error: true
